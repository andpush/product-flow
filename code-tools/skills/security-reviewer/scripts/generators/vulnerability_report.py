"""Generator for individual vulnerability report markdown files."""

from pathlib import Path
from typing import List
import sys

sys.path.insert(0, str(Path(__file__).parent.parent))
from utils.deduplicator import Finding
from utils.severity_mapper import get_severity_name


class VulnerabilityReportGenerator:
    """Generate individual markdown files for each vulnerability."""

    def __init__(self, output_dir: Path):
        """
        Initialize generator.

        Args:
            output_dir: Directory where reports will be saved
        """
        self.output_dir = output_dir
        self.output_dir.mkdir(parents=True, exist_ok=True)

    def generate_report(self, finding: Finding, report_number: int) -> Path:
        """
        Generate a markdown report for a single finding.

        Args:
            finding: The security finding
            report_number: Sequential number for this finding

        Returns:
            Path to the generated report file
        """
        # Generate filename with severity prefix
        filename = f"{finding.severity}-{report_number:03d}.md"
        filepath = self.output_dir / filename

        # Generate markdown content
        content = self._generate_markdown(finding)

        # Write file
        with open(filepath, "w") as f:
            f.write(content)

        return filepath

    def _generate_markdown(self, finding: Finding) -> str:
        """Generate markdown content for a finding."""
        severity_name = get_severity_name(finding.severity)

        # Build CWE reference if available
        cwe_section = ""
        if finding.cwe:
            cwe_id = finding.cwe.replace("CWE-", "")
            cwe_section = f"**CWE:** [{finding.cwe}](https://cwe.mitre.org/data/definitions/{cwe_id}.html)  \n"

        # Build file references section
        file_refs = self._format_file_references(finding)

        # Build code snippet section
        code_section = self._format_code_snippet(finding)

        # Build metadata section
        metadata_section = self._format_metadata(finding)

        # Assemble complete markdown
        markdown = f"""# {finding.title}

**Severity:** {severity_name} ({finding.severity})
**Category:** {finding.category}
{cwe_section}**Tool:** {finding.tool}

## Description

{finding.description}

## Affected Files

{file_refs}

{code_section}

## Impact

This vulnerability could potentially lead to security issues. Review the affected code and assess the actual risk in your specific context.

## Remediation

### Recommended Actions

1. Review the vulnerable code in context
2. Understand the security implications
3. Apply appropriate fixes based on the vulnerability type
4. Test thoroughly after remediation
5. Consider adding security tests to prevent regression

### Resources

{self._generate_resources(finding)}

{metadata_section}
"""

        return markdown

    def _format_file_references(self, finding: Finding) -> str:
        """Format file references section."""
        if finding.line_start == finding.line_end:
            return f"- `{finding.file_path}:{finding.line_start}`"
        else:
            return f"- `{finding.file_path}:{finding.line_start}-{finding.line_end}`"

    def _format_code_snippet(self, finding: Finding) -> str:
        """Format code snippet section."""
        if not finding.code_snippet:
            return ""

        # Try to detect language from file extension
        ext_to_lang = {
            ".py": "python",
            ".js": "javascript",
            ".ts": "typescript",
            ".java": "java",
            ".go": "go",
            ".rb": "ruby",
            ".php": "php",
            ".c": "c",
            ".cpp": "cpp",
            ".rs": "rust",
        }

        file_ext = Path(finding.file_path).suffix
        language = ext_to_lang.get(file_ext, "")

        return f"""## Vulnerable Code

```{language}
{finding.code_snippet.strip()}
```
"""

    def _format_metadata(self, finding: Finding) -> str:
        """Format metadata section."""
        if not finding.metadata:
            return ""

        metadata_items = []
        for key, value in finding.metadata.items():
            if key in ["tools", "check_id", "test_id", "vulnerability_id", "package"]:
                metadata_items.append(f"- **{key}:** {value}")

        if not metadata_items:
            return ""

        return f"""---

## Additional Information

{chr(10).join(metadata_items)}
"""

    def _generate_resources(self, finding: Finding) -> str:
        """Generate resources/references section."""
        resources = []

        # Add CWE link if available
        if finding.cwe:
            cwe_id = finding.cwe.replace("CWE-", "")
            resources.append(f"- [CWE-{cwe_id}](https://cwe.mitre.org/data/definitions/{cwe_id}.html)")

        # Add OWASP reference if applicable
        if "injection" in finding.category.lower() or "injection" in finding.title.lower():
            resources.append("- [OWASP Injection Flaws](https://owasp.org/www-community/Injection_Flaws)")

        # Add tool-specific resources
        if "semgrep" in finding.tool.lower():
            resources.append("- [Semgrep Rules Registry](https://semgrep.dev/r)")
        if "bandit" in finding.tool.lower():
            resources.append("- [Bandit Documentation](https://bandit.readthedocs.io/)")

        if not resources:
            resources.append("- [OWASP Top 10](https://owasp.org/www-project-top-ten/)")

        return "\n".join(resources)

    def generate_all_reports(self, findings: List[Finding]) -> List[Path]:
        """
        Generate reports for all findings.

        Args:
            findings: List of security findings

        Returns:
            List of paths to generated report files
        """
        report_paths = []

        # Sort findings by severity
        severity_order = {"CR": 0, "HI": 1, "ME": 2, "LO": 3}
        sorted_findings = sorted(findings, key=lambda f: (severity_order.get(f.severity, 4), f.title))

        # Generate sequential numbers per severity level
        severity_counters = {"CR": 1, "HI": 1, "ME": 1, "LO": 1}

        for finding in sorted_findings:
            report_number = severity_counters[finding.severity]
            severity_counters[finding.severity] += 1

            report_path = self.generate_report(finding, report_number)
            report_paths.append(report_path)

        return report_paths
